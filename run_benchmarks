#!/usr/bin/env python3

import psutil
from util import get_machine
#from util import time_v
import os
import subprocess
import time
import datetime as dt

machine = get_machine()

# List all of the benchmark scripts in the benchmarks/ directory
# and run them with /usr/bin/time -v, collecting the output.

record = []
for script in os.listdir("benchmarks"):
    if script.endswith(".py"):
        print(script)
        #result = time_v(f"python benchmarks/{script}")
        proc = subprocess.Popen(
            ["python", f"benchmarks/{script}"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        process = psutil.Process(proc.pid)
        peak_memory_rss = 0  # Resident Set Size
        start_time = time.time()
        while proc.poll() is None:  # While the subprocess is still running
            try:
                mem_info = process.memory_info()
                peak_memory_rss = max(peak_memory_rss, mem_info.rss)
            except psutil.NoSuchProcess:
                # The process might have terminated between the poll() and memory_info() call
                break
            time.sleep(0.01)  # Adjust sleep interval as needed for desired granularity
        end_time = time.time()
        result = {
            "timestamp_utc": dt.datetime.utcnow().isoformat() + "Z",
            "benchmark": script,
            "max_rss_bytes": peak_memory_rss,
            "runtime_s": end_time - start_time,
            "exit_status": proc.returncode,

        }

        record.append({**result, **machine})

# Write a newline delimited json
with open("benchmark_results.jsonl", "w") as f:
    for r in record:
        f.write(f"{r}\n")
